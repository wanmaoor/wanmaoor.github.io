<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Oliver</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2019-06-11T14:42:22.774Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Wannmaor</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>JS面试题--函数执行顺序</title>
    <link href="http://yoursite.com/2019/06/11/JS%E9%9D%A2%E8%AF%95%E9%A2%98-%E5%87%BD%E6%95%B0%E6%89%A7%E8%A1%8C%E9%A1%BA%E5%BA%8F/"/>
    <id>http://yoursite.com/2019/06/11/JS面试题-函数执行顺序/</id>
    <published>2019-06-11T14:40:23.000Z</published>
    <updated>2019-06-11T14:42:22.774Z</updated>
    
    <content type="html"><![CDATA[<p>题目如下:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Foo<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">var</span> getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span>Foo<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 2</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 4</span><span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 1</span><span class="token keyword">new</span> <span class="token class-name">Foo<span class="token punctuation">.</span>getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//  2</span><span class="token keyword">new</span> <span class="token class-name">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span class="token keyword">new</span> <span class="token class-name">new</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>答案已经给出,  在注释里. 下面给出解释</p><p>上面代码在执行的顺序如下:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>        console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"1"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">function</span> <span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"5"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token keyword">var</span> getNameFoo<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"2"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>Foo<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"3"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span>getName <span class="token operator">=</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">"4"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="Foo-getName"><a href="#Foo-getName" class="headerlink" title="Foo.getName()"></a><code>Foo.getName()</code></h2><p>直接执行 <code>Foo.getName()</code> 输出<code>2</code></p><h2 id="getName"><a href="#getName" class="headerlink" title="getName()"></a><code>getName()</code></h2><p>直接执行全局 作用域的<code>getName()</code>, 输出<code>4</code></p><h2 id="Foo-getName-1"><a href="#Foo-getName-1" class="headerlink" title="Foo().getName()"></a><code>Foo().getName()</code></h2><ul><li>执行<code>Foo()</code>, 将<code>getName</code> 赋给新的函数, 并返回<code>this</code>, 指向全局作用域</li><li>执行<code>getName()</code>,  此时已被更改, 输出<code>1</code></li></ul><h2 id="new-Foo-getName"><a href="#new-Foo-getName" class="headerlink" title="new Foo.getName()"></a><code>new Foo.getName()</code></h2><p>相当于是构造函数, 输出<code>2</code></p><h2 id="new-Foo-getName-1"><a href="#new-Foo-getName-1" class="headerlink" title="new Foo().getName()"></a><code>new Foo().getName()</code></h2><ul><li><code>var foo = new Foo()</code></li><li><code>foo.getName()</code> <code>foo</code>本身没有<code>getName</code>方法, 所以会在原型链上去寻找, 输出<code>3</code></li></ul><h2 id="new-new-Foo-getName"><a href="#new-new-Foo-getName" class="headerlink" title="new new Foo().getName()"></a><code>new new Foo().getName()</code></h2><ul><li><code>var foo = new Foo()</code></li><li><code>new foo.getName()</code> 将<code>foo.getName()</code>当成构造函数又执行了一次而已</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;题目如下:&lt;/p&gt;
&lt;pre class=&quot;line-numbers language-js&quot;&gt;&lt;code class=&quot;language-js&quot;&gt;&lt;span class=&quot;token keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;token 
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://yoursite.com/categories/FrontEnd/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="面试" scheme="http://yoursite.com/tags/%E9%9D%A2%E8%AF%95/"/>
    
  </entry>
  
  <entry>
    <title>var, let, const</title>
    <link href="http://yoursite.com/2019/05/27/var-let-const/"/>
    <id>http://yoursite.com/2019/05/27/var-let-const/</id>
    <published>2019-05-27T02:36:10.000Z</published>
    <updated>2019-05-27T03:13:30.117Z</updated>
    
    <content type="html"><![CDATA[<h1 id="var"><a href="#var" class="headerlink" title="var"></a><code>var</code></h1><h2 id="变量提升"><a href="#变量提升" class="headerlink" title="变量提升"></a>变量提升</h2><p>当你使用<code>var</code>去定义变量时, 在编译JS时变量会全部提升到当前作用域的顶部.</p><p>同时在全局作用域定义的变量都会成为<code>window</code>的属性</p><h3 id="作用域"><a href="#作用域" class="headerlink" title="作用域"></a>作用域</h3><h4 id="ES6之前"><a href="#ES6之前" class="headerlink" title="ES6之前"></a>ES6之前</h4><p>只有<strong>全局作用域</strong>和 <strong>函数作用域</strong></p><h4 id="ES6之后"><a href="#ES6之后" class="headerlink" title="ES6之后"></a>ES6之后</h4><p><strong>全局作用域</strong> 和 <strong>函数作用域</strong> 和 <strong>块级作用域</strong></p><h2 id="函数提升"><a href="#函数提升" class="headerlink" title="函数提升"></a>函数提升</h2><p>函数声明会提升, 函数表达式不会</p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">/* Function declaration */</span><span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// "bar"</span><span class="token keyword">function</span> <span class="token function">foo</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">/* Function expression */</span><span class="token function">baz</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// TypeError: baz is not a function</span><span class="token keyword">var</span> baz <span class="token operator">=</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'bar2'</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="let"><a href="#let" class="headerlink" title="let"></a><code>let</code></h1><p>与<code>var</code>最大区别是没有变量提升</p><h1 id="const"><a href="#const" class="headerlink" title="const"></a><code>const</code></h1><p>与<code>let</code>区别在于只读不能修改</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;var&quot;&gt;&lt;a href=&quot;#var&quot; class=&quot;headerlink&quot; title=&quot;var&quot;&gt;&lt;/a&gt;&lt;code&gt;var&lt;/code&gt;&lt;/h1&gt;&lt;h2 id=&quot;变量提升&quot;&gt;&lt;a href=&quot;#变量提升&quot; class=&quot;headerlink&quot; title=&quot;
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://yoursite.com/categories/FrontEnd/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>HTML--forms</title>
    <link href="http://yoursite.com/2019/05/14/HTML-forms/"/>
    <id>http://yoursite.com/2019/05/14/HTML-forms/</id>
    <published>2019-05-14T09:52:04.000Z</published>
    <updated>2019-05-25T04:57:12.382Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Form-Widgets"><a href="#Form-Widgets" class="headerlink" title="Form Widgets"></a>Form Widgets</h2><h3 id="Drop-down-content"><a href="#Drop-down-content" class="headerlink" title="Drop-down content"></a>Drop-down content</h3><h4 id><a href="#" class="headerlink" title></a><optgroup></optgroup></h4><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>select</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>groups<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>groups<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>fruits<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Banana<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span> <span class="token attr-name">selected</span><span class="token punctuation">></span></span>Cherry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Lemon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>optgroup</span> <span class="token attr-name">label</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>vegetables<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Carrot<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Eggplant<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Potato<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>optgroup</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>select</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Behold: <a href="https://jsbin.com/ziwebun/2" target="_blank" rel="noopener">Demo</a></p><h3 id="Autocomplete-box"><a href="#Autocomplete-box" class="headerlink" title="Autocomplete box"></a>Autocomplete box</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myFruit<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>What's your favorite fruit?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myFruit<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>myFruit<span class="token punctuation">"</span></span> <span class="token attr-name">list</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mySuggestion<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>datalist</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mySuggestion<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Apple<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Banana<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Blackberry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Blueberry<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Lemon<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Lychee<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Peach<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>option</span><span class="token punctuation">></span></span>Pear<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>option</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>datalist</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Behold: <a href="https://jsbin.com/xowojat/1" target="_blank" rel="noopener">Demo</a></p><h2 id="Advanced-Widgets"><a href="#Advanced-Widgets" class="headerlink" title="Advanced Widgets"></a>Advanced Widgets</h2><h3 id="Numbers"><a href="#Numbers" class="headerlink" title="Numbers"></a>Numbers</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>age<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>2<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Sliders"><a href="#Sliders" class="headerlink" title="Sliders"></a>Sliders</h2><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>range<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beans<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>beans<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>0<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>500<span class="token punctuation">"</span></span> <span class="token attr-name">step</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Behold: <a href="https://jsbin.com/vasenif/2" target="_blank" rel="noopener">Demo</a></p><h2 id="Validation-Of-Forms"><a href="#Validation-Of-Forms" class="headerlink" title="Validation Of Forms"></a>Validation Of Forms</h2><p>以前写表单验证总是在js里写正则表达式, 但是今天看了MDN的文档才发现原来将正则表达式写在HTML里才是更方便的方法, 只要在 <code>input</code> 里添加 <code>pattern</code> 属性, 其值就是正则表达式, Behold:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>choose<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Would you prefer a banana or a cherry?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>choose<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i_like<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">pattern</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>banana|cherry<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>上面代码中, 输入框里只接受 banana 和 cherry 两个选项.</p><p>当然, 使用js+css会更custom一些.</p><h3 id="限制输入框的字符长度"><a href="#限制输入框的字符长度" class="headerlink" title="限制输入框的字符长度"></a>限制输入框的字符长度</h3><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>choose<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Would you prefer a banana or a cherry?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>text<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>choose<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>i_like<span class="token punctuation">"</span></span> <span class="token attr-name">required</span> <span class="token attr-name">minlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span> <span class="token attr-name">maxlength</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>6<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>How many would you like?<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>number<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>amount<span class="token punctuation">"</span></span> <span class="token attr-name">value</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">min</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>1<span class="token punctuation">"</span></span> <span class="token attr-name">max</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>10<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="自定义错误信息"><a href="#自定义错误信息" class="headerlink" title="自定义错误信息"></a>自定义错误信息</h3><p>我们不会满足于HTML内置的验证报错提示的样式, 因为它在某种程度上可以说是很难看, 当然我们有空间去这样做.</p><p>为了实现自定义的validation, 我们需要使用到JavaScript的API来辅助完成.Behold:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>form</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>label</span> <span class="token attr-name">for</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>I would like you to provide me an e-mail<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>label</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>input</span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>email<span class="token punctuation">"</span></span> <span class="token attr-name">id</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mail<span class="token punctuation">"</span></span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>mail<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>button</span><span class="token punctuation">></span></span>Submit<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>button</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>form</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>在JS里, 我们可以使用 <code>setCustomValidity()</code> 方法:</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> email <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementById</span><span class="token punctuation">(</span><span class="token string">"mail"</span><span class="token punctuation">)</span>email<span class="token punctuation">.</span><span class="token function">addEventListener</span><span class="token punctuation">(</span><span class="token string">"input"</span><span class="token punctuation">,</span> <span class="token keyword">function</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">{</span>    email<span class="token punctuation">.</span>validity<span class="token punctuation">.</span>typeMismatch <span class="token operator">?</span> email<span class="token punctuation">.</span><span class="token function">setCustomValidity</span><span class="token punctuation">(</span><span class="token string">"我要e-mail! 亲!"</span><span class="token punctuation">)</span> <span class="token punctuation">:</span> email<span class="token punctuation">.</span><span class="token function">setCustomValidity</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>当然, constraint validation API 实在是太多了, 这里不可能一个个介绍, 更详细的还是在<a href="https://developer.mozilla.org/en-US/docs/Learn/HTML/Forms/Form_validation#The_constraint_validation_API" target="_blank" rel="noopener">mdn</a>里面</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Form-Widgets&quot;&gt;&lt;a href=&quot;#Form-Widgets&quot; class=&quot;headerlink&quot; title=&quot;Form Widgets&quot;&gt;&lt;/a&gt;Form Widgets&lt;/h2&gt;&lt;h3 id=&quot;Drop-down-content&quot;&gt;&lt;a hre
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://yoursite.com/categories/FrontEnd/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML的&lt;head&gt;里有什么</title>
    <link href="http://yoursite.com/2019/05/13/HTML-%E5%AE%B9%E6%98%93%E5%BF%BD%E8%A7%86%E7%9A%84%E9%83%A8%E5%88%86/"/>
    <id>http://yoursite.com/2019/05/13/HTML-容易忽视的部分/</id>
    <published>2019-05-13T12:56:44.000Z</published>
    <updated>2019-05-25T04:56:55.529Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Metadata-the-lt-meta-gt-element"><a href="#Metadata-the-lt-meta-gt-element" class="headerlink" title="Metadata: the &lt;meta&gt; element"></a>Metadata: the <code>&lt;meta&gt;</code> element</h2><p>元数据是描述数据的数据, 使用 <code>&lt;meta&gt;</code> 标签来表述. 元数据是一个相当大的set, 一个个搞懂是没有必要的一件事情, 下面只记录一些比较常用的.</p><h3 id="定义字符集编码"><a href="#定义字符集编码" class="headerlink" title="定义字符集编码"></a>定义字符集编码</h3><p><code>&lt;meta charset=&quot;utf-8&quot;&gt;</code></p><p>上面代码定义了这个document的字符集编码为 <code>utf-8</code> , 它的好处是可以显示任何语言在你的显示器上而不会出现乱码.</p><h3 id="添加author和description"><a href="#添加author和description" class="headerlink" title="添加author和description"></a>添加author和description</h3><p><code>&lt;meta&gt;</code> 标签含有 <code>name</code> , <code>content</code> 两个属性.</p><ul><li><p><code>name</code> 表示作者名字, 没有多大作用</p></li><li><p><code>content</code> 在SEO有很大作用, 它的值将会显示在搜索结果上. 比如我们在Google上搜索MDN.结果如下:</p><p><img src="https://mdn.mozillademos.org/files/16074/mdn-search-result.png" alt></p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>description<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>The MDN Web Docs site   provides information about Open Web technologies   including HTML, CSS, and APIs for both Web sites and   progressive web apps.<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="添加自定义的icon"><a href="#添加自定义的icon" class="headerlink" title="添加自定义的icon"></a>添加自定义的icon</h2><ol><li><p>在页面的相同路径下添加尾缀为 <code>.ico</code> 形式的icon</p></li><li><p>添加如下链接到 <code>head</code> 里:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>link</span> <span class="token attr-name">rel</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>shortcut icon<span class="token punctuation">"</span></span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>favicon.ico<span class="token punctuation">"</span></span> <span class="token attr-name">type</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>image/x-icon<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Metadata-the-lt-meta-gt-element&quot;&gt;&lt;a href=&quot;#Metadata-the-lt-meta-gt-element&quot; class=&quot;headerlink&quot; title=&quot;Metadata: the &amp;lt;meta&amp;gt; ele
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://yoursite.com/categories/FrontEnd/"/>
    
    
      <category term="HTML" scheme="http://yoursite.com/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>this-arguments</title>
    <link href="http://yoursite.com/2019/05/08/this-arguments/"/>
    <id>http://yoursite.com/2019/05/08/this-arguments/</id>
    <published>2019-05-08T04:20:21.000Z</published>
    <updated>2019-05-25T05:01:23.106Z</updated>
    
    <content type="html"><![CDATA[<h1 id="this-amp-arguments"><a href="#this-amp-arguments" class="headerlink" title="this&amp;arguments"></a>this&amp;arguments</h1><h2 id="1-What-is-call"><a href="#1-What-is-call" class="headerlink" title="1. What is call()?"></a>1. What is call()?</h2><p><code>call()</code>的第一个参数是<code>this</code>, 后面的(无论有没有)都是<code>arguments</code>.</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">f</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">}</span>f<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Window, Arguments</span>f<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"frank"</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{name: "frank"}, Arguments</span>f<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">"frank"</span><span class="token punctuation">}</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//{name: "frank"}, Arguments(2) [1, 2, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="2-f-VS-f-call"><a href="#2-f-VS-f-call" class="headerlink" title="2. f() VS f.call()"></a>2. f() VS f.call()</h2><p><code>f.call()</code>&gt;<code>f()</code> </p><p><code>f.call()</code> is more specific than <code>f()</code>.</p><p>当我们向<code>call()</code>的第一个参数传入非对象的数据时, 打印出来的会是什么呢?</p><pre class="line-numbers language-javascript"><code class="language-javascript">f<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Number {100}, Arguments [1, callee: ƒ, Symbol(Symbol.iterator): ƒ]</span><span class="token comment" spellcheck="true">//结果跟new了一个100一样:</span><span class="token keyword">new</span> <span class="token class-name">Number</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Number {100}</span>这是为什么呢<span class="token operator">?</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-1-this是函数与对象的羁绊"><a href="#2-1-this是函数与对象的羁绊" class="headerlink" title="2.1 this是函数与对象的羁绊"></a>2.1 this是函数与对象的羁绊</h3><p>一开始没有<code>this</code>的时候:</p><pre class="line-numbers language-javascript"><code class="language-javascript"> <span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>   name<span class="token punctuation">:</span> <span class="token string">'frank'</span><span class="token punctuation">,</span>   sayHi<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi, I am'</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   sayBye<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Bye, I am'</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>   <span class="token punctuation">}</span><span class="token punctuation">,</span>   say<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> word<span class="token punctuation">)</span><span class="token punctuation">{</span>     console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>word <span class="token operator">+</span> <span class="token string">', I am'</span> <span class="token operator">+</span> person<span class="token punctuation">.</span>name<span class="token punctuation">)</span>   <span class="token punctuation">}</span> <span class="token punctuation">}</span><span class="token comment" spellcheck="true">//若要打印出frank需要如下调用</span>person<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>person<span class="token punctuation">.</span><span class="token function">sayBye</span><span class="token punctuation">(</span>person<span class="token punctuation">)</span>person<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span>person<span class="token punctuation">,</span> <span class="token string">'How are you'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//有人嫌弃上面的调用方式不够简洁, 说我用person调用函数, 那你应该默认给我传person, 而不是还要我指定. 于是this应运而生</span><span class="token keyword">var</span> person <span class="token operator">=</span> <span class="token punctuation">{</span>  name<span class="token punctuation">:</span> <span class="token string">'frank'</span><span class="token punctuation">,</span>  sayHi<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Hi, I am'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  sayBye<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'Bye, I am'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">,</span>  say<span class="token punctuation">:</span> <span class="token keyword">function</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">{</span>      console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>word <span class="token operator">+</span> <span class="token string">', I am'</span> <span class="token operator">+</span> <span class="token keyword">this</span><span class="token punctuation">.</span>name<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token comment" spellcheck="true">//现在要实现如上功能, 那就只需要如下代码:</span>person<span class="token punctuation">.</span><span class="token function">sayHi</span><span class="token punctuation">(</span><span class="token punctuation">)</span>person<span class="token punctuation">.</span><span class="token function">sayBye</span><span class="token punctuation">(</span><span class="token punctuation">)</span>person<span class="token punctuation">.</span><span class="token function">say</span><span class="token punctuation">(</span><span class="token string">'How are you'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//可这时还有一些人有不满足了, 他们想按照自己的想法来指定this的指向对象, 这就需要用到call(), 用call()的第一个参数作为this的指向对象 </span><span class="token keyword">var</span> fn <span class="token operator">=</span> person<span class="token punctuation">.</span>sayHi<span class="token function">fn</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// Hi, I am   </span>     <span class="token comment" spellcheck="true">//    fn() === fn.call(). 由于没有传参, this就是undefined</span>fn<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span>name<span class="token punctuation">:</span> <span class="token string">'ttt'</span><span class="token punctuation">}</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Hi, I amttt</span>     <span class="token comment" spellcheck="true">// 传入了一个对象, 于是就会调用这个对象</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="3-apply"><a href="#3-apply" class="headerlink" title="3. apply()"></a>3. apply()</h2><p>假设有如下情况:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token comment" spellcheck="true">// 我要求一个不确定的数组的和</span><span class="token comment" spellcheck="true">//解:</span><span class="token keyword">function</span> <span class="token function">sum</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">var</span> n <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">var</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> arguments<span class="token punctuation">.</span>length<span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>    n <span class="token operator">+</span><span class="token operator">=</span> arguments<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token punctuation">}</span>  <span class="token keyword">return</span> n<span class="token punctuation">}</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//21</span><span class="token function">sum</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//15</span><span class="token comment" spellcheck="true">//进一步地, 如果我们想求一个很大地数组的和, 我们不能一个一个地写进sum, 那么可以用apply()来解决</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">14</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">]</span>sum<span class="token punctuation">.</span><span class="token function">apply</span><span class="token punctuation">(</span><span class="token keyword">null</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//136</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong><code>apply()</code>于参数不确定地情况, 作用和<code>call</code>是一样地</strong></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;this-amp-arguments&quot;&gt;&lt;a href=&quot;#this-amp-arguments&quot; class=&quot;headerlink&quot; title=&quot;this&amp;amp;arguments&quot;&gt;&lt;/a&gt;this&amp;amp;arguments&lt;/h1&gt;&lt;h2 id=&quot;1
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://yoursite.com/categories/FrontEnd/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>实现流畅顺滑的滚动效果的两种方式</title>
    <link href="http://yoursite.com/2019/05/08/%E5%AE%9E%E7%8E%B0%E6%B5%81%E7%95%85%E9%A1%BA%E6%BB%91%E7%9A%84%E6%BB%9A%E5%8A%A8%E6%95%88%E6%9E%9C%E7%9A%84%E4%B8%A4%E7%A7%8D%E6%96%B9%E5%BC%8F/"/>
    <id>http://yoursite.com/2019/05/08/实现流畅顺滑的滚动效果的两种方式/</id>
    <published>2019-05-08T04:10:44.000Z</published>
    <updated>2019-05-25T05:02:33.385Z</updated>
    
    <content type="html"><![CDATA[<h2 id="CSS的scroll-behavior-smooth"><a href="#CSS的scroll-behavior-smooth" class="headerlink" title="CSS的scroll-behavior: smooth"></a>CSS的<code>scroll-behavior: smooth</code></h2><p>优点：没有JS代码，纯CSS实现。设置简单。</p><p>缺点：目前兼容性不好，只能支持FireFox 36, Chrome61以上版本的浏览器</p><p><a href="https://jsbin.com/sefimum/1" target="_blank" rel="noopener">demo 地址</a></p><p>实现方式：在container的div里使用<code>scroll-behavior: smooth</code> 即可。另外，当使用滚动条滚动网页时，两个section都出现在viewport里，为了使其自动向下或向上滑移。需要在container里设置<code>scroll-snap-type: y mandatory</code>, 在section里设置<code>scroll-snap-align: center</code> </p><h2 id="smooth-scroll-JS-库"><a href="#smooth-scroll-JS-库" class="headerlink" title="smooth-scroll JS 库"></a>smooth-scroll JS 库</h2><p>按照<a href="https://github.com/cferdinandi/smooth-scroll" target="_blank" rel="noopener">文档</a>提示操作即可</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;CSS的scroll-behavior-smooth&quot;&gt;&lt;a href=&quot;#CSS的scroll-behavior-smooth&quot; class=&quot;headerlink&quot; title=&quot;CSS的scroll-behavior: smooth&quot;&gt;&lt;/a&gt;CSS的&lt;co
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://yoursite.com/categories/FrontEnd/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>CORS跨域初步理解</title>
    <link href="http://yoursite.com/2019/05/06/CORS%E8%B7%A8%E5%9F%9F%E5%88%9D%E6%AD%A5%E7%90%86%E8%A7%A3/"/>
    <id>http://yoursite.com/2019/05/06/CORS跨域初步理解/</id>
    <published>2019-05-06T13:45:35.000Z</published>
    <updated>2019-05-25T04:42:37.434Z</updated>
    
    <content type="html"><![CDATA[<h1 id="CORS-初步探究跨域资源分享"><a href="#CORS-初步探究跨域资源分享" class="headerlink" title="CORS 初步探究跨域资源分享"></a>CORS 初步探究跨域资源分享</h1><p>本文灵感来源于 <a href="http://performantcode.com/web/do-you-really-know-cors" target="_blank" rel="noopener">Do you really know CORS? </a> 一文</p><h2 id="什么是同域？同源政策？"><a href="#什么是同域？同源政策？" class="headerlink" title="什么是同域？同源政策？"></a>什么是同域？同源政策？</h2><p>同域就是<strong>同协议</strong>， <strong>同hostname</strong>， <strong>同端口</strong> 的 domain。<strong>同域政策</strong> (SOP, Same Origin Policy) 规定只有同域之间才能互相进行资源访问。超出此范围都算<strong>跨域请求</strong> (CORS, Cross-Origin Resource Sharing)。</p><p><strong>同源政策</strong> 只存在于浏览器-服务器之间，curl，postman等软件不会受其影响。</p><h2 id="如何实现跨域请求？"><a href="#如何实现跨域请求？" class="headerlink" title="如何实现跨域请求？"></a>如何实现跨域请求？</h2><p>跨域分为两种： 简单请求和预检验请求。两者关系互斥， 不存在任何交集</p><h3 id="简单请求-Simple-Request"><a href="#简单请求-Simple-Request" class="headerlink" title="简单请求(Simple Request)"></a>简单请求(Simple Request)</h3><p>只要不触发预检验的都是简单请求，以下是触发简单请求的条件：</p><ul><li>使用下列方法之一：<ul><li><code>GET</code></li><li><code>HEAD</code></li><li><code>POST</code></li></ul></li><li><code>Content-Type</code> 仅限于以下几种：<ul><li><code>text/plain</code></li><li><code>multipart/form-data</code></li><li><code>application/x-www-form-urlencoded</code></li></ul></li><li>除了规范里定义的subset之外没有任何<code>header</code></li></ul><h3 id="预检验请求-Preflighted-Request"><a href="#预检验请求-Preflighted-Request" class="headerlink" title="预检验请求(Preflighted Request)"></a>预检验请求(Preflighted Request)</h3><p>那么很明显，只要不符合简单请求的都能划分到预检验请求中。</p><p>在预检验中，浏览器会预先发送一个 OPTIONS 请求，作为预先检验，从而使服务器判定这个请求是否安全。如果你的origin在服务器的<code>Access-Control-Allow-Origin</code> 里，那么你就被允许跨域访问了。接下来就可以进行发送正式的request请求了。</p><p>预检验请求每次都会被重新加载，为了减少重载次数可以设置<code>Access-Control-Max-Age</code> 响应头，设置最大缓存时间。</p><h2 id="CORS安全吗？"><a href="#CORS安全吗？" class="headerlink" title="CORS安全吗？"></a>CORS安全吗？</h2><p>安全。当初没有同源政策的限制时，只要hacker能获取你的cookie就能为所欲为。这就是同源政策存在的原因。有人会说既然CORS能够实现跨域访问，那么之前的问题不就又出现了吗？没错，It’s back again。但<strong>CORS没有在跨域请求里包含了cookie</strong>， 这是和以前最大的区别。</p><p>当然，你想携带cookie也是允许的。但出于安全的考虑，需要在客户端和服务端设置验证功能，当<code>Access-Control-Allow-Credentials</code> 被设置为<code>true</code>时，也能进行跨域请求。问题也出在这儿，许多服务器会盲目地根据用户的Origin Value来把用户添加进<code>Access-Control-Allow-Origin</code> 里，这时只要用户稍作修改也是能够轻易攻破的，这也是一个安全问题。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;CORS-初步探究跨域资源分享&quot;&gt;&lt;a href=&quot;#CORS-初步探究跨域资源分享&quot; class=&quot;headerlink&quot; title=&quot;CORS 初步探究跨域资源分享&quot;&gt;&lt;/a&gt;CORS 初步探究跨域资源分享&lt;/h1&gt;&lt;p&gt;本文灵感来源于 &lt;a href=&quot;h
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://yoursite.com/categories/FrontEnd/"/>
    
    
      <category term="-FrontEnd" scheme="http://yoursite.com/tags/FrontEnd/"/>
    
  </entry>
  
  <entry>
    <title>DOM 系列</title>
    <link href="http://yoursite.com/2019/03/15/DOM%E7%B3%BB%E5%88%97/"/>
    <id>http://yoursite.com/2019/03/15/DOM系列/</id>
    <published>2019-03-15T03:01:54.000Z</published>
    <updated>2019-05-25T04:54:45.505Z</updated>
    
    <content type="html"><![CDATA[<h1 id="DOM-增"><a href="#DOM-增" class="headerlink" title="DOM - 增"></a>DOM - 增</h1><h2 id="Document-createElement"><a href="#Document-createElement" class="headerlink" title="Document.createElement()"></a><code>Document.createElement()</code></h2><p>创建新的 <code>HTML</code> 标签  </p><h2 id="innerText-VS-textContent"><a href="#innerText-VS-textContent" class="headerlink" title="innerText() VS. textContent()"></a><code>innerText() VS. textContent()</code></h2><p><strong>相同点：</strong> 在标签内部添加文本内容</p><p><strong>不同点：</strong> 前者只显示展示出的内容， 后者在显示前者的内容的基础上还会显示被隐藏的内容</p><p><img src="https://res.cloudinary.com/dkul1vhg8/image/upload/v1557199740/1.png" alt="比对"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;DOM-增&quot;&gt;&lt;a href=&quot;#DOM-增&quot; class=&quot;headerlink&quot; title=&quot;DOM - 增&quot;&gt;&lt;/a&gt;DOM - 增&lt;/h1&gt;&lt;h2 id=&quot;Document-createElement&quot;&gt;&lt;a href=&quot;#Document-create
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://yoursite.com/categories/FrontEnd/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="DOM" scheme="http://yoursite.com/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>Async/Await</title>
    <link href="http://yoursite.com/2019/01/19/Async-Await/"/>
    <id>http://yoursite.com/2019/01/19/Async-Await/</id>
    <published>2019-01-19T05:08:59.000Z</published>
    <updated>2019-05-25T04:52:49.989Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Usage"><a href="#Usage" class="headerlink" title="Usage"></a>Usage</h1><p>使用  <code>Async/Await</code>  让异步写起来更简单,  感觉像是在写同步代码一样:</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">async</span> <span class="token keyword">function</span> <span class="token function">logFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">try</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token keyword">await</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span> <span class="token keyword">await</span> response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fetch failed, '</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">logFetch</span><span class="token punctuation">(</span><span class="token string">'https://jsonplaceholder.typicode.com/todos/1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下:<br><img src="https://res.cloudinary.com/dkul1vhg8/image/upload/v1557207723/Blog/ASYNC%20AWAIT/1.png" alt="pic"></p><p><code>logFetch</code> 函数是这样执行的: </p><ul><li>先在控制台输出 <code>1</code> </li><li>执行 <code>fetch</code> 函数</li><li>等待返回的结果并打印结果到控制台</li><li>在控制台输出 <code>2</code>    </li></ul><p>那直接去掉 <code>Async/Await</code> 呢?</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">logFetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">{</span>  <span class="token keyword">try</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">const</span> response <span class="token operator">=</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span><span class="token function">text</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>  <span class="token punctuation">}</span>  <span class="token keyword">catch</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">{</span>    console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token string">'fetch failed, '</span><span class="token punctuation">,</span> err<span class="token punctuation">)</span>  <span class="token punctuation">}</span><span class="token punctuation">}</span><span class="token function">logFetch</span><span class="token punctuation">(</span><span class="token string">'https://jsonplaceholder.typicode.com/todos/1'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果如下:</p><p><img src="https://res.cloudinary.com/dkul1vhg8/image/upload/v1557207730/Blog/ASYNC%20AWAIT/2.png" alt></p><p><code>logFetch</code> 函数是这样执行的: </p><ul><li>先在控制台输出 <code>1</code> </li><li>执行 <code>fetch</code> 函数</li><li><strong>这里不一样了!!</strong>  由于浏览器不会等待 <code>fetch()</code> 函数的结果, 直接打印 <code>response.text()</code>  就报错了</li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;Usage&quot;&gt;&lt;a href=&quot;#Usage&quot; class=&quot;headerlink&quot; title=&quot;Usage&quot;&gt;&lt;/a&gt;Usage&lt;/h1&gt;&lt;p&gt;使用  &lt;code&gt;Async/Await&lt;/code&gt;  让异步写起来更简单,  感觉像是在写同步代码一样:&lt;/p
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://yoursite.com/categories/FrontEnd/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>CSS Layout</title>
    <link href="http://yoursite.com/2018/12/16/CSS-Layout/"/>
    <id>http://yoursite.com/2018/12/16/CSS-Layout/</id>
    <published>2018-12-16T07:53:51.000Z</published>
    <updated>2019-05-25T04:53:51.212Z</updated>
    
    <content type="html"><![CDATA[<h3 id="boxsizing-box-border"><a href="#boxsizing-box-border" class="headerlink" title="boxsizing: box-border"></a><code>boxsizing: box-border</code></h3><p>当你设置一个元素为 <code>box-sizing: border-box;</code> 时，此元素的内边距和边框不再会增加它的宽度。<br><img src="https://res.cloudinary.com/dkul1vhg8/image/upload/v1557207859/Blog/CSS-layout/1.png" alt="pic"></p><h2 id="position"><a href="#position" class="headerlink" title="position"></a><code>position</code></h2><h3 id="position-relative"><a href="#position-relative" class="headerlink" title="position: relative"></a><code>position: relative</code></h3><p><img src="https://res.cloudinary.com/dkul1vhg8/image/upload/v1557207859/Blog/CSS-layout/2.png" alt="pic"></p><h3 id="position-fixed"><a href="#position-fixed" class="headerlink" title="position: fixed"></a><code>position: fixed</code></h3><p><img src="https://res.cloudinary.com/dkul1vhg8/image/upload/v1557207859/Blog/CSS-layout/3.png" alt="pic"></p><h3 id="position-absolute"><a href="#position-absolute" class="headerlink" title="position: absolute"></a><code>position: absolute</code></h3><p><img src="https://res.cloudinary.com/dkul1vhg8/image/upload/v1557207859/Blog/CSS-layout/4.png" alt="pic"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;boxsizing-box-border&quot;&gt;&lt;a href=&quot;#boxsizing-box-border&quot; class=&quot;headerlink&quot; title=&quot;boxsizing: box-border&quot;&gt;&lt;/a&gt;&lt;code&gt;boxsizing: box-bord
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://yoursite.com/categories/FrontEnd/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>一次讲完数组操作</title>
    <link href="http://yoursite.com/2018/11/26/%E4%B8%80%E6%AC%A1%E8%AE%B2%E5%AE%8C%E6%95%B0%E7%BB%84%E6%93%8D%E4%BD%9C/"/>
    <id>http://yoursite.com/2018/11/26/一次讲完数组操作/</id>
    <published>2018-11-26T11:38:02.000Z</published>
    <updated>2019-05-25T05:02:00.360Z</updated>
    
    <content type="html"><![CDATA[<h4 id="下面是改变原数组的方法"><a href="#下面是改变原数组的方法" class="headerlink" title="下面是改变原数组的方法:"></a>下面是改变原数组的方法:</h4><ul><li><p><code>push()</code> 在数组<strong>尾部添加</strong>元素  </p></li><li><p><code>pop()</code> 在数组<strong>尾部删除</strong> 元素</p></li><li><p><code>shift()</code> 在数组<strong>头部删除</strong> 元素</p></li><li><p><code>unshift()</code> 在数组<strong>头部添加</strong> 元素</p></li><li><p><code>splice()</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true">//删除从0开始的第一个元素</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1]</span>arr <span class="token comment" spellcheck="true">// [2, 3, 4, 5, 6, 7, 8]</span><span class="token comment" spellcheck="true">//从1开始删除两个元素并用另外两个元素代替</span>arr<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token string">"3"</span><span class="token punctuation">,</span> <span class="token string">"4"</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [3,4]</span>arr <span class="token comment" spellcheck="true">//[2, "3", "4", 5, 6, 7, 8]</span><span class="token comment" spellcheck="true">//单纯地插入元素</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// []</span>a <span class="token comment" spellcheck="true">// [1, 2, 1, 1]</span><span class="token comment" spellcheck="true">//将数组分为两个部分</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">splice</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [3, 4]</span>a <span class="token comment" spellcheck="true">// [1, 2]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>sort()</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">54</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">sort</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [1, 2, 3, 3, 4, 54, 6, 6, 9]</span>arr <span class="token comment" spellcheck="true">//[1, 2, 3, 3, 4, 54, 6, 6, 9]</span><span class="token comment" spellcheck="true">//sort不是按照大小顺序排列, 而是先转换为字符串, 按照字典顺序排列, "54"中的"5"大于"4"且小于"6", 于是在4和6的中间</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h4 id="下面是不改变原数组的方法"><a href="#下面是不改变原数组的方法" class="headerlink" title="下面是不改变原数组的方法:"></a>下面是不改变原数组的方法:</h4><ul><li><p><code>slice()</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">slice</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2, 3, 4]</span>arr <span class="token comment" spellcheck="true">// [1, 2, 3, 4, 5, 6, 7, 8]</span><span class="token comment" spellcheck="true">//slice方法的一个重要应用，是将类似数组的对象转为真正的数组, 但ES6有其他更简单的办法, 那就是Array.from(arr)</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token punctuation">{</span> <span class="token number">0</span><span class="token punctuation">:</span> <span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">:</span> <span class="token string">'b'</span><span class="token punctuation">,</span> length<span class="token punctuation">:</span> <span class="token number">2</span> <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ['a', 'b']</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>document<span class="token punctuation">.</span><span class="token function">querySelectorAll</span><span class="token punctuation">(</span><span class="token string">"div"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>Array<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>slice<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span>arguments<span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>concat()</code><br>将两个数组拼接在一起</p></li><li><p><code>map()</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span>n<span class="token operator">=</span><span class="token operator">></span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [2, 3, 4]</span>arr <span class="token comment" spellcheck="true">// [1, 2, 3]</span><span class="token comment" spellcheck="true">//map()的回调函数的第一个参数是数组元素, 第二个是元素位置, 第三个是原数组</span>arr<span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span> <span class="token operator">=</span><span class="token operator">></span> elem <span class="token operator">*</span> index<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// [0, 2, 6]</span>arr <span class="token comment" spellcheck="true">// [1, 2, 3]</span><span class="token comment" spellcheck="true">//map()第一个元素接受一个回调函数, 第二个参数是给回调函数内部的this指向</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">map</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">return</span> <span class="token keyword">this</span><span class="token punctuation">[</span>e<span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token comment" spellcheck="true">// ['b', 'c']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>forEach()</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token punctuation">(</span>elem<span class="token punctuation">,</span> index<span class="token punctuation">,</span> arr<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span><span class="token template-string"><span class="token string">`arr[</span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>index<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">] = </span><span class="token interpolation"><span class="token interpolation-punctuation punctuation">${</span>elem<span class="token interpolation-punctuation punctuation">}</span></span><span class="token string">`</span></span><span class="token punctuation">)</span><span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">/**arr[0] = 1*arr[1] = 2*arr[2] = 3*arr[3] = 4*arr[4] = 5*/</span><span class="token comment" spellcheck="true">//和map()一样, foreach()第二个参数是回调函数内部的this指向</span><span class="token keyword">var</span> out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">forEach</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span>elem<span class="token punctuation">)</span> <span class="token punctuation">{</span>  <span class="token keyword">this</span><span class="token punctuation">.</span><span class="token function">push</span><span class="token punctuation">(</span>elem <span class="token operator">*</span> elem<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> out<span class="token punctuation">)</span><span class="token punctuation">;</span>out <span class="token comment" spellcheck="true">// [1, 4, 9]</span><span class="token comment" spellcheck="true">//forEach()循环不能中断</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>filter()</code> </p><p>根据条件过滤数组, 回调函数的三个参数的意义和<code>filter()</code> 的第二个参数的意义和<code>map()</code>和<code>forEach()</code>是一样的</p></li><li><p><code>some() &amp; every()</code></p><p>这两个方法类似“断言”（assert），返回一个布尔值，表示判断数组成员是否符合某种条件</p></li><li><p><code>reduce() &amp; reduceRight()</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span> <span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> a <span class="token operator">+</span> b<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 1 2</span><span class="token comment" spellcheck="true">// 3 3</span><span class="token comment" spellcheck="true">// 6 4</span><span class="token comment" spellcheck="true">// 10 5</span><span class="token comment" spellcheck="true">//最后结果：15</span><span class="token comment" spellcheck="true">//reduceRight()无非就是从右边开始罢了</span><span class="token comment" spellcheck="true">//reduce()指定第二个参数为初始值</span><span class="token keyword">var</span> arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span>arr<span class="token punctuation">.</span><span class="token function">reduce</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>b<span class="token punctuation">)</span><span class="token operator">=</span><span class="token operator">></span><span class="token punctuation">{</span>  console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>  <span class="token keyword">return</span> a<span class="token operator">+</span>b<span class="token punctuation">}</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">// 10 1</span><span class="token comment" spellcheck="true">// 11 2</span><span class="token comment" spellcheck="true">// 13 3</span><span class="token comment" spellcheck="true">// 16 4</span><span class="token comment" spellcheck="true">// 20 5</span><span class="token comment" spellcheck="true">// 25</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p><code>indexOf() &amp; lastindexOf()</code></p><pre class="line-numbers language-js"><code class="language-js"><span class="token comment" spellcheck="true">// indexOf方法返回给定元素在数组中第一次出现的位置，如果没有出现则返回-1</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'b'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 1</span>a<span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'y'</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1</span><span class="token comment" spellcheck="true">//indexOf方法还可以接受第二个参数，表示搜索的开始位置。</span><span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">]</span><span class="token punctuation">.</span><span class="token function">indexOf</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1</span><span class="token comment" spellcheck="true">// lastIndexOf方法返回给定元素在数组中最后一次出现的位置，如果没有出现则返回-1</span><span class="token keyword">var</span> a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>a<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// 3</span>a<span class="token punctuation">.</span><span class="token function">lastIndexOf</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">// -1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;下面是改变原数组的方法&quot;&gt;&lt;a href=&quot;#下面是改变原数组的方法&quot; class=&quot;headerlink&quot; title=&quot;下面是改变原数组的方法:&quot;&gt;&lt;/a&gt;下面是改变原数组的方法:&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;push()&lt;/code&gt; 在数组
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://yoursite.com/categories/FrontEnd/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>em &amp; rem in font-size</title>
    <link href="http://yoursite.com/2018/10/03/em-rem-in-font-size/"/>
    <id>http://yoursite.com/2018/10/03/em-rem-in-font-size/</id>
    <published>2018-10-03T02:35:34.000Z</published>
    <updated>2019-05-25T04:55:25.270Z</updated>
    
    <content type="html"><![CDATA[<p>Today, I’m going to talk about font units em and rem, According to <a href="https://developer.mozilla.org/en-US/docs/Web/CSS/font-size" target="_blank" rel="noopener">MDN</a> , it said below that: </p><blockquote><p> For most font-relative units (such as <code>em</code> and <code>ex</code>), the font size is relative to the parent element’s font size.</p><p>For font-relative units that are root-based (such as <code>rem</code>), the font size is relative to the size of the font used by the <code>html</code> (root) element.</p></blockquote><p>I will show you the difference between two units with codes:</p><pre class="line-numbers language-html"><code class="language-html"><span class="token doctype">&lt;!DOCTYPE html></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>html</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>head</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">charset</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>utf-8<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>meta</span> <span class="token attr-name">name</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>viewport<span class="token punctuation">"</span></span> <span class="token attr-name">content</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>width<span class="token punctuation">=</span>device-width<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span><span class="token punctuation">></span></span>JS Bin<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>head</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>body</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>我是文章<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>p1<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>p</span><span class="token punctuation">></span></span>I'm a article<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>p</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>body</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>html</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>And then, we will define two CSS file to show their difference</p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*1st*/</span><span class="token selector"><span class="token class">.p1</span></span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.p1</span> p</span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">0.5</span>em <span class="token comment" spellcheck="true">/*equal to 20px*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/em-rem-in-font-size/1.png" alt></p><pre class="line-numbers language-css"><code class="language-css"><span class="token comment" spellcheck="true">/*2nd*/</span><span class="token selector"><span class="token class">.p1</span></span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">40</span>px<span class="token punctuation">;</span><span class="token punctuation">}</span><span class="token selector"><span class="token class">.p1</span> p</span><span class="token punctuation">{</span>  <span class="token property">font-size</span><span class="token punctuation">:</span> <span class="token number">2</span>rem <span class="token comment" spellcheck="true">/*equal to 40px*/</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/em-rem-in-font-size/2.png" alt></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Today, I’m going to talk about font units em and rem, According to &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/CSS/font-size&quot; t
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://yoursite.com/categories/FrontEnd/"/>
    
    
      <category term="CSS" scheme="http://yoursite.com/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript的封装</title>
    <link href="http://yoursite.com/2018/08/02/JavaScript%E7%9A%84%E5%B0%81%E8%A3%85/"/>
    <id>http://yoursite.com/2018/08/02/JavaScript的封装/</id>
    <published>2018-08-02T10:10:16.000Z</published>
    <updated>2019-05-25T05:00:43.125Z</updated>
    
    <content type="html"><![CDATA[<h1 id="浅谈对象的封装"><a href="#浅谈对象的封装" class="headerlink" title="浅谈对象的封装"></a>浅谈对象的封装</h1><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>今天看到阮一峰的一篇讲<a href="http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html" target="_blank" rel="noopener">对象封装</a>的文章,小有收获。在此借这篇博客记录一下，在这里，我将会以变出一支篮球队为例来展开文章</p><h2 id="生成一个实例对象"><a href="#生成一个实例对象" class="headerlink" title="生成一个实例对象"></a>生成一个实例对象</h2><p>生成一个最简单的对象的方法就是<code>let player = {}</code>。一个球员就这样诞生了，不过现在它还什么都不是，没有四肢，没有头脑，更不会打球。于是我要给他赋予这些东西，也就是属性。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> player1 <span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Curry'</span><span class="token punctuation">,</span>    number<span class="token punctuation">:</span> <span class="token number">30</span><span class="token punctuation">,</span>    team<span class="token punctuation">:</span> <span class="token string">'Warriors'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这样，我创建了一个名叫Curry，球衣号码为30号，为勇士队效力的球员。不过篮球不是一个人的运动，Curry还需要队友：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> player2 <span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Thompson'</span><span class="token punctuation">,</span>    number<span class="token punctuation">:</span> <span class="token number">11</span><span class="token punctuation">,</span>    team<span class="token punctuation">:</span> <span class="token string">'Warriors'</span><span class="token punctuation">}</span><span class="token keyword">let</span> player3 <span class="token operator">=</span><span class="token punctuation">{</span>    name<span class="token punctuation">:</span> <span class="token string">'Durant'</span><span class="token punctuation">,</span>    number<span class="token punctuation">:</span> <span class="token number">35</span><span class="token punctuation">,</span>    team<span class="token punctuation">:</span> <span class="token string">'Warriors'</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>唉，等等。要是每一个球员都像上面的方式来创造，只是写五个人的首发阵容还行，但NBA一支球队有15人，整个联盟30支球队，我要是这样一个一个写估计离<del>猝死</del>不远了。</p><h2 id="evolution1：使用函数"><a href="#evolution1：使用函数" class="headerlink" title="evolution1：使用函数"></a>evolution1：使用函数</h2><p>使用函数的优点就是可复用性高，只要声明定义了一次，就能随便调用了。</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">function</span> <span class="token function">Player</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">return</span> <span class="token punctuation">{</span>        name<span class="token punctuation">:</span> name<span class="token punctuation">,</span>        number<span class="token punctuation">:</span> number    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我们定义了一个Player的函数，用它来生成球员：</p><pre class="line-numbers language-javascript"><code class="language-javascript"><span class="token keyword">let</span> player4 <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token string">"Green"</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token keyword">let</span> player5 <span class="token operator">=</span> <span class="token function">Player</span><span class="token punctuation">(</span><span class="token string">"Iguodala"</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="evolution2：构造函数"><a href="#evolution2：构造函数" class="headerlink" title="evolution2：构造函数"></a>evolution2：构造函数</h2><p>使用构造函数：</p><pre class="line-numbers language-js"><code class="language-js"><span class="token keyword">function</span> <span class="token function">Player</span><span class="token punctuation">(</span>name<span class="token punctuation">,</span> number<span class="token punctuation">)</span> <span class="token punctuation">{</span>    <span class="token keyword">this</span><span class="token punctuation">.</span>name <span class="token operator">=</span> name    <span class="token keyword">this</span><span class="token punctuation">.</span>number <span class="token operator">=</span> number<span class="token punctuation">}</span><span class="token comment" spellcheck="true">//继续创造球员</span><span class="token keyword">let</span> player6 <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Player</span><span class="token punctuation">(</span><span class="token string">'livingston'</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="evolution3-使用原型Prototype"><a href="#evolution3-使用原型Prototype" class="headerlink" title="evolution3: 使用原型Prototype"></a>evolution3: 使用原型Prototype</h2><p>似乎上面那种方式已经足够好了，但我之前就已经埋下了一个坑：think about, 我在定义<code>player1</code>的时候还有一个<code>team</code>属性，通过构造函数来生成一个个实例的时候，<code>team</code>属性都会被生成一次，明明大家的<code>team</code>属性都一样，还要反复生成，这会浪费计算机的内存。于是乎，我们可以将众多实例共有的属性直接添加到其构造函数的Protoype里：</p><pre class="line-numbers language-javascript"><code class="language-javascript">Player<span class="token punctuation">.</span>prototype<span class="token punctuation">.</span>team <span class="token operator">=</span> <span class="token string">'Warroirs'</span>console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>palyer4<span class="token punctuation">.</span>team<span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//Warroirs</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h1 id="Ending"><a href="#Ending" class="headerlink" title="Ending"></a>Ending</h1><p>这样，一个球队就这样建立起来了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h1 id=&quot;浅谈对象的封装&quot;&gt;&lt;a href=&quot;#浅谈对象的封装&quot; class=&quot;headerlink&quot; title=&quot;浅谈对象的封装&quot;&gt;&lt;/a&gt;浅谈对象的封装&lt;/h1&gt;&lt;h2 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前
      
    
    </summary>
    
      <category term="FrontEnd" scheme="http://yoursite.com/categories/FrontEnd/"/>
    
    
      <category term="JavaScript" scheme="http://yoursite.com/tags/JavaScript/"/>
    
      <category term="面向对象" scheme="http://yoursite.com/tags/%E9%9D%A2%E5%90%91%E5%AF%B9%E8%B1%A1/"/>
    
      <category term="封装" scheme="http://yoursite.com/tags/%E5%B0%81%E8%A3%85/"/>
    
  </entry>
  
</feed>
